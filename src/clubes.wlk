import actividades.*

class Club {

	var property socios = #{}
	var property actividades = #{}
	var property valorDelPaseEstrella = 0
	var property gastoMensual = 0

	method socioMasAntiguo() {
		return socios.max({ socio => socio.antiguedad() })
	}

	method sociosDestacados() {
		return actividades.map({ actividad => actividad.destacado() }).asSet()
	}

	method sociosDestacadosEstrellas() {
		return self.sociosDestacados().filter({ socio => self.esEstrella(socio) })
	}

	method esEstrella(jugador)

	method participaDeMuchasActividades(jugador) {
		return actividades.count({ act => act.participa(jugador) }) >= 3
	// return actividades.filter({ act => act.participa(jugador)}).size() >= 3
	}

	method valorDePaseSuperador(jugador) {
		return jugador.valorPase() >= valorDelPaseEstrella
	}

	method sancionar() {
		if (socios.size() > 500) {
			actividades.forEach({ actividad => actividad.sancionar()})
		}
	}

	method evaluacion() {
		return self.evaluacionBruta() / socios.size()
	}

	method evaluacionBruta() {
		return actividades.sum({ actividad => actividad.evaluacion() })
	}

	method esPrestigioso() {
		return self.tieneEquipoExperimentado() or self.actividadesTienenEstrellas()
	}

	method tieneEquipoExperimentado() {
		return actividades.any({ actividad => actividad.esExperimentado() })
	}

	method actividadesTienenEstrellas() {
		return actividades.any({ actividad => actividad.esPrestigiosa() })
	}

	method transferir(jugador, nuevoEquipo) {
		self.removerSocio(jugador)
		self.removerDeActividades(jugador)
		nuevoEquipo.agregarParticipante(jugador)
	}

	method addSocio(socio) {
		socios.add(socio)
	}

	method removerSocio(param1) {
	// TODO: Autogenerated Code ! 
	}

	method removerDeActividades(param1) {
	// TODO: Autogenerated Code ! 
	}

}

class ClubComunitario inherits Club {

	override method esEstrella(jugador) {
		return self.participaDeMuchasActividades(jugador)
	}

}

class ClubTradicional inherits Club {

	override method esEstrella(jugador) {
		return self.participaDeMuchasActividades(jugador) or self.valorDePaseSuperador(jugador)
	}

	override method evaluacionBruta() {
		return super() - gastoMensual
	}

}

class ClubProfesional inherits Club {

	override method esEstrella(jugador) {
		return self.valorDePaseSuperador(jugador)
	}

	override method evaluacionBruta() {
		return super() * 2 - gastoMensual * 5
	}

}

